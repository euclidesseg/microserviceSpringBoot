==== MICROSERVICIOS =====
---- Los microservicios son una arquitectura y estilo de programar software 
---- en donde el proyecto principal se dividde en mircro proyectos o microservicios
---- es decir, los microservicios dividen a las aplicaciones en pequeños elementos independientes entre si




==== Breve eplicacion sobre los archivos

---- pom.xml
     Cordina a maven indica que dependencias instalar 
     Como el servidor tomcat

---- .\mvnw.cmd spring-boot:run
     para ejecutar maven en windows

---- mvnw
     para ejecutar maven en linuz o mac

---- src
     Todo nuestro codigo final

---- .mvnw
     todos los archivos de maven
     algo asi como un node-modules


---- mvnw.cmd spring-boot:run
     arrancar nuestra aplicacion


     ===============================================================================================
     PARA TRABAJAR CON SPRING BOOT EXSISTE UNA ESTRUCTURA DE ARCHIVOS PREESTABLECIDAS POR CONVENCION
     ===============================================================================================

---- /Controllers
     UsuarioController.java
     resibe la peticion y ejecuta la logica principal

---- /Services
     UsuarioService.java
     todo lo que el usuario pude hacer en el sistema

---- /Repositories
     UsuarioRepository.java
     Aqui se encuentra la logica para conectarse con la base de datos para
     Consultas Sql 

----/Models
     UsuarioModel.java
     Sirve para mapear o representar una tablad e la base de datos a una clase de java



======================================================================================================
//////////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
======================================================================================================


==== REST TEMPLATE ====
---- Comunicacio de microservicios de java con restemplate

---- para hacer la comunicacion entre microservicios vamos a ir hasta nuestro microservicio de UsuarioService
---- a crear una carpeta configuracion ya que es ese el microservicio principal

---- luego de crear esta configuracion en la carpeta configuration vamos a crear un nuevo paquete o caprpeta 
---- modelos para guardar entidades de los demas microservicios como referencias
---- despues de configurar las dos clases con su contructor y sus getter and setters

---- Ahora vamos hasta nuestro servicio de usuario para injectar la clase configuration que hemos creados


==== COMUNICACION DE MICROSERVICIOS USANDO FEIGN CLIENT =====
---- Ya vimos como comunicar microservicios con restemplate ahora vamos a aprender a comunicarlos con Feign Client
---- ya que es importante concocer ambas formas de hacerlo
 
==== Importante ! usar una version compatible entre feignclient y spring-boot
==== <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
			 <version>3.0.4</version> 
			 <version>2.5.2</version> //spring
	</dependency>

---- Para ello vamos a tener que descargar una dependencia nueva en nuestro microservicio de Usuario
---- llamada ==OpenFeign==

---- Spring boot es una erramienta de spring framework que simplifica el desarrollo de aplicaciones 
---- springframework.cloud es otro proyecto usado por spring boot que es netamente para desarrollo de microservicios
---- y OpenFeign  es de spring cloud por lo que ya estamos usando spring cloud

---- Ahora nos vamos a la clase principal o clase base de nuestro misroservicio de usuarios
---- para agregar una anotacion

---- seguido creamos la carpeta feignClients que figurara como todos nuestros clientes de microservicios es decir, los microservicios
---- a los que accederemos desde user-service, en esa carpeta creamos interfaz o las que necesitemos con los metodos que necesitemos 
---- con las anotaciones respectivas para acceder al microservicio que necesitemos.

---- despues de todo esto vamos hasta nuestro servicio para poner en uso la interfaz que acabamos de crear
----  agregaremos los metodos debajo de los metodos del restemplate

==== MotoFeignClient ==== 
---- Ahora haremos lo mismo para con el servicio de moto lo usaremos como cliente Feign Desde user-service
---- Si estás utilizando Feign para comunicarte con un microservicio remoto, es importante que definas las rutas
---- y métodos en tu cliente Feign de manera coherente con el controlador del microservicio remoto al que te estás conectando.

