==== MICROSERVICIOS =====
---- Los microservicios son una arquitectura y estilo de programar software 
---- en donde el proyecto principal se dividde en mircro proyectos o microservicios
---- es decir, los microservicios dividen a las aplicaciones en peque√±os elementos independientes entre si




==== Breve eplicacion sobre los archivos

---- pom.xml
     Cordina a maven indica que dependencias instalar 
     Como el servidor tomcat

---- .\mvnw.cmd spring-boot:run
     para ejecutar maven en windows

---- mvnw
     para ejecutar maven en linuz o mac

---- src
     Todo nuestro codigo final

---- .mvnw
     todos los archivos de maven
     algo asi como un node-modules


---- mvnw.cmd spring-boot:run
     arrancar nuestra aplicacion


     ===============================================================================================
     PARA TRABAJAR CON SPRING BOOT EXSISTE UNA ESTRUCTURA DE ARCHIVOS PREESTABLECIDAS POR CONVENCION
     ===============================================================================================

---- /Controllers
     UsuarioController.java
     resibe la peticion y ejecuta la logica principal

---- /Services
     UsuarioService.java
     todo lo que el usuario pude hacer en el sistema

---- /Repositories
     UsuarioRepository.java
     Aqui se encuentra la logica para conectarse con la base de datos para
     Consultas Sql 

----/Models
     UsuarioModel.java
     Sirve para mapear o representar una tablad e la base de datos a una clase de java


==== REST TEMPLATE ====
---- Comunicacio de microservicios de java con restemplate

---- para hacer la comunicacion entre microservicios vamos a ir hasta nuestro microservicio de UsuarioService
---- a crear una carpeta configuracion ya que es ese el microservicio principal

---- luego de crear esta configuracion en la carpeta configuration vamos a crear un nuevo paquete o caprpeta 
---- modelos para guardar entidades de los demas microservicios como referencias
---- despues de configurar las dos clases con su contructor y sus getter and setters

---- Ahora vamos hasta nuestro servicio de usuario para injectar la clase configuration que hemos creados