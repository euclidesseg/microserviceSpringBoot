==== Gateway =====
---- Mientras implementamos multiples servicios de eureka nos dimos cuenta que, el config data de cada
---- microservicio lo que hace es dar un puerto por defecto a cada instancia entonces para provar eso en el postman 
---- se nos vuelve tedioso es par eso que se implementa un servicio Gateway para no lidiar con todas esas instancias y sus pueertos

---- Gateway traduse puerta de enlace y su funcionalidad es:
---- Permitirnos la comunicacion e intercambi de informacion 
-----con diferentes sistemas o servicios desde la misma ip

---- entonces creamos en spring initializer un nuevo proyecto llamado gateway service con las siguientes dependencias
---- spring web 
---- spring dev tools
---- spring routing  --- esta me va a permitir redireccionar a los microservicios mediante un puerto
---- config-client   --- esta debido a que este sergvicio va a ser un cliente de config server
---- eureka-client   --- esta devido a que este servicio tambien sera proevido en eureka server para guardar su instancia

---- Modificamos el aplication.properti por bootstrap 
---- la dependencias de bootstrap la debemos agregar manualmente y que no se descarga desde el spting initializer
---- en su clase principal indicamos que que sera un cliente de eureka con @EnableEurekaClient

==== Creamos su archivo en vonfig-service (servidor de configuracion) ====
---- ahora crearemos su archivo de configuracion dentro de config-data 
---- en donde pondremos el puerto el cual no sera por defecto si no que sera un oespecifico o estatico 
---- igualmente la instancia o hostname sera fija como localhost

---- segido de esa configuracion pondremos:
---- spring:
        cloud:
          gateway:
            discovery:
              locator:
                enabled: true
            routes:
              - id: user-service
                uri: lb://usuario-service
                predicates:
                  - Path=/usuario/**

==== Configuración del Enrutamiento en Spring Cloud Gateway ====

---- spring:                Sección que contiene la configuración específica de Spring Framework.
------ cloud:                 Subsección que se relaciona con las capacidades de nube y configuración de Spring Cloud.
-------- gateway:               Subsección que configura la funcionalidad de enrutamiento en Spring Cloud Gateway.
--------- discovery:         Subsección que configura la integración con el servicio de descubrimiento (Eureka u otro).
---------- locator:           Subsección que configura el uso de la funcionalidad de localización/descubrimiento.
----------- enabled:       Habilita la funcionalidad de descubrimiento en el enrutador de Spring Cloud Gateway.
--------- routes:                Lista de rutas que el enrutador debe manejar.
---------- - id:                Identificador único para la ruta.
------------ uri:               URI de destino de la ruta, puede ser una instancia de servicio registrado.
------------ predicates:        Lista de predicados que deben cumplirse para que la ruta sea activada.
------------- - Path:         Predicado que se activa cuando la ruta se ajusta a un patrón de ruta específico ("/usuario/**" en este caso).

---- y desde aqui:  - id: user-service
                uri: lb://usuario-service
                predicates:
                  - Path=/usuario/**
---- devemos compiar uno para cada servicio que queramos enrutar


---- NOTA: El descubrimiento en el contexto de la arquitectura de microservicios se refiere a la 
---------- capacidad de encontrar y localizar automáticamente servicios en una red sin necesidad 
---------- de conocer de antemano las direcciones IP o las ubicaciones exactas de dichos servicios.


---- ID (Identificador): En este caso, el "id" se refiere a un identificador único para el enrutador o 
---- la configuración del servicio que estás definiendo. Puede ser un nombre descriptivo para identificar el microservicio o 
---- la ruta en cuestión. Por ejemplo, "user-service" podría ser el identificador de un microservicio que maneja la 
---- lógica relacionada con los usuarios.
---- 
---- URI (Uniform Resource Identifier): La "uri" se refiere a la ubicación del recurso al que se dirigirá la solicitud entrante.
---- En este caso, "lb://" se utiliza para indicar que estás haciendo referencia a un balanceador de carga. 
---- "lb://" se utiliza como un prefijo para indicar que la solicitud debe ser enviada a través de un equilibrador 
---- de carga antes de llegar al microservicio real. El equilibrador de carga distribuirá las solicitudes entrantes 
---- entre las instancias del microservicio para lograr una distribución uniforme de la carga de trabajo.
---- 
---- Predicates (Predicados): Los predicados son condiciones o reglas que se aplican a una solicitud entrante para 
---- determinar si debe ser dirigida a un servicio específico. En este caso, el predicado "Path=/users/" 
---- se usa para verificar si la ruta de la solicitud coincide con el patrón "/users/". 
---- Esto significa que cualquier solicitud que comience con "/users/" será dirigida al microservicio identificado por el "id".

---- Por ultimo solo nos queda ir a la configuracion de los feign client y quitar el puerto que hemos dado 
---- a los clientes feign de carro y moto ya que ese puerto lo asignamos por defecto en eureka-server
